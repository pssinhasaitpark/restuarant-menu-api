// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model restaurant {
  id              String         @id @default(uuid())
  role_type       String         @default("restaurant_admin")
  restaurant_name String?
  owner_name      String?
  email           String         @unique
  password        String
  mobile          String
  opening_time    String?
  closing_time    String?
  location        String?
  logo            String         @default("logo url")
  type            restaurantType @default(veg)
  images          String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  qr_code_url     String?
  wishlist        Boolean        @default(false)
  tables          table[]
  bookings        booking[]
  menu_items      menu_items[]
  category        category[]
  staff           staff[]
  review          review[]
  order           order[]
  stock           stock[]
}

enum restaurantType {
  veg
  non_veg
}

model table {
  id            String @id @default(uuid()) @db.Uuid
  table_number  String @unique
  capacity      Int
  cover_charges Int    @default(30)
  status        String @default("free")

  restaurant_id String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  bookings      booking[]
}

model booking {
  id                String  @id @default(uuid()) @db.Uuid
  customer_name     String
  contact_no        String
  num_of_people     Int
  booking_time      String
  date              String
  total_charge      Int
  instruction       String?
  status            String  @default("pending")
  payment_status    String  @default("pending")
  razorpay_order_id String  @unique @default("null")
  payment_id        String  @default("null")
  token_number      String?
  is_visited        String  @default("false")

  restaurant_id String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  user_id String
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  menu_items menu_items[]
  tables     table[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model menu_items {
  id               String             @id @default(uuid()) @db.Uuid
  item_name        String
  item_description String?
  item_price       String
  images           String[]
  category_id      String             @db.Uuid
  type             String             @default("veg")
  category         category           @relation(fields: [category_id], references: [id], onDelete: Cascade)
  restaurant_id    String
  restaurant       restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  bookings         booking[]
  order_menu_items order_menu_items[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model category {
  id            String       @id @default(uuid()) @db.Uuid
  category_name String
  restaurant_id String
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  menu_items    menu_items[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category_name, restaurant_id])
}

model support {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String
  phone_no String
  subject  String
  issues   String
}

model staff {
  id              String  @id @default(uuid()) @db.Uuid
  employee_id     String
  first_name      String
  last_name       String
  email           String  @unique
  gender          String?
  mobile_no       String
  address         String?
  designation     String
  department      String
  employment_type String
  joining_date    String
  other_details   String?
  profile_image   String?

  restaurant_id String?
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model review {
  id            String     @id @default(uuid()) @db.Uuid
  stars         Float
  comment       String?
  user_name     String
  user_id       String
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  restaurant_id String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
}

model user {
  id         String    @id @default(uuid())
  user_name  String
  email      String    @unique
  mobile_no  String    @unique
  role_type  String    @default("user")
  createdAt  DateTime  @default(now())
  otp        String?
  otp_expiry DateTime?
  review     review[]
  booking    booking[]
}

// model order {
//   id            String   @id @default(uuid()) @db.Uuid
//   token_number  String   @unique
//   customer_name String
//   email         String
//   status        String   @default("pending")
//   total_amount  Float    @default(0)
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   menu_items    menu_items[]
//   restaurant_id String
//   restaurant    restaurant   @relation(fields: [restaurant_id], references: [id])
// }

model order_menu_items {
  id           String     @id @default(uuid()) @db.Uuid
  order_id     String     @db.Uuid
  menu_item_id String     @db.Uuid
  quantity     Int
  order        order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
  menu_item    menu_items @relation(fields: [menu_item_id], references: [id], onDelete: Cascade)
}

model order {
  id            String   @id @default(uuid()) @db.Uuid
  token_number  String   @unique
  customer_name String
  email         String
  order_id      String
  status        String   @default("pending")
  total_amount  Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order_menu_items order_menu_items[]
  restaurant_id    String
  restaurant       restaurant         @relation(fields: [restaurant_id], references: [id])
}


model stock {
  id               String   @id @default(uuid())
  item_name        String  
  category_name    String   
  quantity         Int     
  unit             String   
  supplier_name    String   
  price_per_unit   Float    
  total_price      Float    @default(0)

  restaurant_id    String  
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([restaurant_id]) 
}
