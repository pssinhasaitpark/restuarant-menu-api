generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model restaurant {
  id                 String               @id @default(uuid())
  role_type          String               @default("restaurant_admin")
  restaurant_name    String?
  owner_name         String?
  email              String               @unique
  password           String
  mobile             String
  opening_time       String?
  closing_time       String?
  location           String?
  logo               String               @default("logo url")
  type               restaurantType       @default(veg)
  images             String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  qr_code_url        String?
  wishlist           Boolean              @default(false)
  bookings           booking[]
  category           category[]
  menu_items         menu_items[]
  order              order[]
  review             review[]
  staff              staff[]
  staff_salary       staff_salary[]
  stock              stock[]
  support            support[]
  tables             table[]
  restaurant_details restaurant_details[]
}

model table {
  id            String     @id @default(uuid()) @db.Uuid
  table_number  String     @unique
  capacity      Int
  cover_charges Int        @default(30)
  status        String     @default("free")
  restaurant_id String
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  bookings      booking[]  @relation("bookingTotable")
}

model booking {
  id                String             @id @default(uuid()) @db.Uuid
  customer_name     String
  contact_no        String
  num_of_people     Int
  booking_time      String
  date              String
  total_charge      Int
  instruction       String?
  status            String             @default("pending")
  payment_status    String             @default("pending")
  razorpay_order_id String             @unique @default("null")
  payment_id        String             @default("null")
  token_number      String?
  is_visited        String             @default("false")
  restaurant_id     String
  user_id           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  restaurant        restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  user              user               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  menu_items        menu_items[]       @relation("bookingTomenu_items")
  tables            table[]            @relation("bookingTotable")
  order_menu_items  order_menu_items[]
}

model menu_items {
  id               String             @id @default(uuid()) @db.Uuid
  item_name        String
  item_description String?
  item_price       String
  images           String[]
  category_id      String             @db.Uuid
  type             String             @default("veg")
  restaurant_id    String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  is_today_special Boolean            @default(false) 
  is_famous_item   Boolean            @default(false) 
  category         category           @relation(fields: [category_id], references: [id], onDelete: Cascade)
  restaurant       restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  order_menu_items order_menu_items[]
  bookings         booking[]          @relation("bookingTomenu_items")
}

model category {
  id            String       @id @default(uuid()) @db.Uuid
  category_name String
  restaurant_id String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  restaurant    restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  menu_items    menu_items[]

  @@unique([category_name, restaurant_id])
}

model support {
  id            String            @id @default(uuid()) @db.Uuid
  issues        String
  restaurant_id String
  user_id       String
  user          user              @relation(fields: [user_id], references: [id])
  restaurant    restaurant        @relation(fields: [restaurant_id], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  messages      support_message[]
}

model support_message {
  id         String            @id @default(uuid()) @db.Uuid
  message    String
  sender     SupportSenderType
  support_id String            @db.Uuid
  createdAt  DateTime          @default(now())

  support support @relation(fields: [support_id], references: [id], onDelete: Cascade)
}

enum SupportSenderType {
  user
  restaurant_admin
}

model staff {
  id              String         @id @default(uuid())
  employee_id     String
  first_name      String
  last_name       String
  email           String         @unique
  gender          String?
  mobile_no       String
  address         String?
  designation     String
  department      String
  employment_type String
  joining_date    String
  other_details   String?
  profile_image   String?
  restaurant_id   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  restaurant      restaurant?    @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  staff_salary    staff_salary[]
}

model staff_salary {
  id               String     @id @default(uuid())
  staff_id         String
  employee_id      String
  base_salary      Float
  bonus            Float
  per_day_rate     Float
  health_insurance Float
  absence_days     Float
  total_deduction  Float
  total_pay_amount Float
  payment_status   String     @default("unpaid")
  payment_date     DateTime?
  month            String
  year             Int
  restaurant_id    String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  gross_salary     Float
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id])
  staff            staff      @relation(fields: [staff_id], references: [id], onDelete: Cascade)
}

model review {
  id            String     @id @default(uuid()) @db.Uuid
  stars         Float
  comment       String?
  user_name     String
  user_id       String
  restaurant_id String
  createdAt     DateTime   @default(now())
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user {
  id               String             @id @default(uuid())
  user_name        String
  email            String             @unique
  mobile_no        String             @unique
  role_type        String             @default("user")
  createdAt        DateTime           @default(now())
  otp              String?
  otp_expiry       DateTime?
  booking          booking[]
  order_menu_items order_menu_items[]
  review           review[]
  support          support[]
}

model order_menu_items {
  id           String  @id @default(uuid()) @db.Uuid
  order_id     String? @db.Uuid
  menu_item_id String  @db.Uuid
  quantity     Int
  user_id      String?
  booking_id   String? @db.Uuid // Optional booking_id field

  menu_item menu_items @relation(fields: [menu_item_id], references: [id], onDelete: Cascade)
  order     order?     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user      user?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  booking   booking?   @relation(fields: [booking_id], references: [id], onDelete: Cascade) // New relation
}

model order {
  id               String             @id @default(uuid()) @db.Uuid
  token_number     String             @unique
  customer_name    String
  email            String
  order_id         String
  status           String             @default("pending")
  total_amount     Float              @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  restaurant_id    String
  restaurant       restaurant         @relation(fields: [restaurant_id], references: [id])
  order_menu_items order_menu_items[]
}

model stock {
  id             String     @id @default(uuid())
  item_name      String
  category_name  String
  quantity       Int
  unit           String
  supplier_name  String
  price_per_unit Float
  total_price    Float      @default(0)
  restaurant_id  String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  restaurant     restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  @@index([restaurant_id])
}

enum restaurantType {
  veg
  non_veg
}

model social_media {
  id        String   @id @default(uuid())
  whatsapp  String?
  facebook  String?
  instagram String?
  youtube   String?
  linkedIn  String?
  snapchat  String?
  thread    String?
  pinterest String?
  x         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model restaurant_details {
  id                   String     @id @default(uuid())
  gallery_images       String[]
  about_us             String?
  privacy_policy       String?
  terms_and_conditions String?
  services_name        String[]
  restaurant_id        String
  restaurant           restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}
